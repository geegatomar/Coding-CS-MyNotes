=====================================================================================================================================================
JAVASCRIPT NOTES

--------------------------------------------------------------------------------------------------------------------------------------

Changing text on click

<button onclick="document.getElementById('myText').innerHTML ='this is the changed text on clicking the button' > Click me </button>


Changing img on click

<button onclick="document.getElementById('myImg').src = 'new_image.png'> Click me </button>

--------------------------------------------------------------------------------------------------------------------------------------

AJAX

AJAX is the art of exchanging data with a server, and updating parts of a web page - without reloading the whole page.

Ajax requests are triggered by JavaScript code; your code sends a request to a URL, and when it receives a response, a callback function can be triggered to handle the response. Because the request is asynchronous, the rest of your code continues to execute while the request is being processed, so it's imperative that a callback be used to handle the response.

jQuery provides Ajax support that abstracts away painful browser differences. It offers both a full-featured $.ajax() method, and simple convenience methods such as $.get(), $.getScript(), $.getJSON(), $.post(), and $().load().
--------------------------------------------------------------------------------------------------------------------------------------

GET vs. POST

The GET method should be used for non-destructive operations — that is, operations where you are only "getting" data from the server, not changing data on the server. For example, a query to a search service might be a GET request. GET requests may be cached by the browser, which can lead to unpredictable behavior if you are not expecting it. GET requests generally send all of their data in a query string.

The POST method should be used for destructive operations — that is, operations where you are changing data on the server. For example, a user saving a blog post should be a POST request. POST requests are generally not cached by the browser; a query string can be part of the URL, but the data tends to be sent separately as post data.



